/*
 * HCsCR is a third-party mod for Minecraft Java Edition
 * that allows removing the end crystals faster.
 *
 * Copyright (c) 2023 Offenderify
 * Copyright (c) 2023-2025 VidTu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package ru.vidtu.hcscr.platform;

import com.google.errorprone.annotations.DoNotCall;
import com.llamalad7.mixinextras.service.MixinExtrasVersion;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.Contract;
import org.jspecify.annotations.NullMarked;
import org.jspecify.annotations.Nullable;
import org.objectweb.asm.tree.ClassNode;
import org.spongepowered.asm.mixin.extensibility.IMixinConfigPlugin;
import org.spongepowered.asm.mixin.extensibility.IMixinInfo;
import ru.vidtu.hcscr.HCsCR;
import ru.vidtu.hcscr.mixins.crystals.PlayerMixin_E;
import ru.vidtu.hcscr.mixins.crystals.PlayerMixin_M;

import java.util.List;
import java.util.Set;

/**
 * Mixin plugin that selects MixinExtras mixins if MixinExtras
 * is installed in the environment for better compatibility.
 *
 * @author VidTu
 * @apiNote Internal use only
 * @see PlayerMixin_E
 * @see PlayerMixin_M
 */
@ApiStatus.Internal
@NullMarked
public final class HPlugin implements IMixinConfigPlugin {
    /**
     * Marker for all logs generated by the mod.
     * It is reduplicated here, because {@link HCsCR#HCSCR_MARKER} can't be loaded early.
     *
     * @see HCsCR#HCSCR_MARKER
     */
    private static final Marker HCSCR_MARKER = MarkerManager.getMarker("MOD_HCSCR");

    /**
     * Logger for this class.
     */
    private static final Logger LOGGER = LogManager.getLogger("HCsCR/HPlugin");

    /**
     * Whether the MixinExtras mixins are used.
     *
     * @see #shouldUseMixinExtras()
     */
    private final boolean mixinExtras = this.shouldUseMixinExtras();

    /**
     * Creates a new plugin.
     *
     * @apiNote Do not call, called by Mixin
     */
    @Contract(pure = true)
    public HPlugin() {
        // Empty.
    }

    /**
     * Checks if the mixin should be applied.
     *
     * @param targetClassName Fully qualified class name of the target class
     * @param mixinClassName  Fully qualified class name of the mixin
     * @return Whether the Mixin should be applied
     * @apiNote Do not call, called by Mixin
     */
    @DoNotCall("Called by Mixin")
    @Contract(pure = true)
    @Override
    public boolean shouldApplyMixin(String targetClassName, String mixinClassName) {
        // If the Mixin class is not from HCsCR, don't touch it and allow it to be applied.
        if (!mixinClassName.startsWith("ru.vidtu.hcscr.mixins.")) {
            // Log. (**TRACE**)
            if (!LOGGER.isTraceEnabled(HCSCR_MARKER)) return true;
            LOGGER.trace(HCSCR_MARKER, "HCsCR: Applying mixin, because it's not a part of HCsCR. (mixinExtras: {}, plugin: {}, targetClassName: {}, mixinClassName: {})", this.mixinExtras, this, targetClassName, mixinClassName);
            return true;
        }

        // Check if the Mixin should be applied.
        boolean applyMixin;
        if (mixinClassName.endsWith("_E")) { // Mixin[E]xtras. Use only if MixinExtras IS installed.
            applyMixin = this.mixinExtras;
        } else if (mixinClassName.endsWith("_M")) { // [M]ixin. Use only if MixinExtras is NOT installed.
            applyMixin = !this.mixinExtras;
        } else {
            applyMixin = true;
        }

        // Log. (**DEBUG**)
        if (applyMixin) {
            LOGGER.debug(HCSCR_MARKER, "HCsCR: Applying mixin. (mixinExtras: {}, plugin: {}, targetClassName: {}, mixinClassName: {})", this.mixinExtras, this, targetClassName, mixinClassName);
        } else {
            LOGGER.debug(HCSCR_MARKER, "HCsCR: Mixin has been ruled out due to MixinExtras rules, mixin WON'T be applied. (mixinExtras: {}, plugin: {}, targetClassName: {}, mixinClassName: {})", this.mixinExtras, this, targetClassName, mixinClassName);
        }

        // Return.
        return applyMixin;
    }

    /**
     * Does nothing.
     *
     * @param mixinPackage Ignored
     * @apiNote Do not call, called by Mixin
     */
    @DoNotCall("Called by Mixin")
    @Contract(pure = true)
    @Override
    public void onLoad(String mixinPackage) {
        // NO-OP
    }

    /**
     * Does nothing. Always returns {@code null}.
     *
     * @return Always {@code null}
     * @apiNote Do not call, called by Mixin
     */
    @DoNotCall("Called by Mixin")
    @Contract(value = "-> null", pure = true)
    @Override
    @Nullable
    public String getRefMapperConfig() {
        return null;
    }

    /**
     * Does nothing.
     *
     * @param myTargets    Ignored
     * @param otherTargets Ignored
     * @apiNote Do not call, called by Mixin
     */
    @DoNotCall("Called by Mixin")
    @Contract(pure = true)
    @Override
    public void acceptTargets(Set<String> myTargets, Set<String> otherTargets) {
        // NO-OP
    }

    /**
     * Does nothing. Always returns {@code null}.
     *
     * @return Always {@code null}
     * @apiNote Do not call, called by Mixin
     */
    @DoNotCall("Called by Mixin")
    @Contract(value = "-> null", pure = true)
    @Override
    @Nullable
    public List<String> getMixins() {
        return null;
    }

    /**
     * Does nothing.
     *
     * @param targetClassName Ignored
     * @param targetClass     Ignored
     * @param mixinClassName  Ignored
     * @param mixinInfo       Ignored
     * @apiNote Do not call, called by Mixin
     */
    @DoNotCall("Called by Mixin")
    @Contract(pure = true)
    @Override
    public void preApply(String targetClassName, ClassNode targetClass, String mixinClassName, IMixinInfo mixinInfo) {
        // NO-OP
    }

    /**
     * Does nothing.
     *
     * @param targetClassName Ignored
     * @param targetClass     Ignored
     * @param mixinClassName  Ignored
     * @param mixinInfo       Ignored
     * @apiNote Do not call, called by Mixin
     */
    @DoNotCall("Called by Mixin")
    @Contract(pure = true)
    @Override
    public void postApply(String targetClassName, ClassNode targetClass, String mixinClassName, IMixinInfo mixinInfo) {
        // NO-OP
    }

    @Contract(pure = true)
    @Override
    public String toString() {
        return "HCsCR/HPlugin{" +
                "mixinExtras=" + this.mixinExtras +
                '}';
    }

    /**
     * Checks if the MixinExtras mixins should be used in place of plain mixins for better compatibility.
     * The "{@code ru.vidtu.hcscr.mixinextras}" system property is taken into effect:
     * <ol>
     *     <li>If set to "{@code false}", MixinExtras will NEVER be used.</li>
     *     <li>If set to "{@code true}", MixinExtras will ALWAYS be used.</li>
     *     <li>If set to "{@code auto}" (or unset, the default), MixinExtras
     *     will be used if it is installed in the current environment.</li>
     *     <li>If set to any other value, an {@link IllegalStateException} is thrown.</li>
     * </ol>
     *
     * @return Whether the MixinExtras mixins should be used
     * @throws IllegalStateException If the system property is set to an invalid value
     * @see #mixinExtras
     * @see MixinExtrasVersion
     * @see System#getProperty(String)
     */
    @Contract(pure = true)
    private boolean shouldUseMixinExtras() {
        // Extract the system property.
        String property = System.getProperty("ru.vidtu.hcscr.mixinextras", "auto");

        // Check if forcefully disabled.
        if ("false".equalsIgnoreCase(property)) {
            // Log, disable.
            LOGGER.info(HCSCR_MARKER, "HCsCR: MixinExtras usage is forcefully DISABLED via the 'ru.vidtu.hcscr.mixinextras' property.");
            return false;
        }

        // Check if forcefully enabled.
        if ("true".equalsIgnoreCase(property)) {
            // Log, enable.
            LOGGER.info(HCSCR_MARKER, "HCsCR: MixinExtras usage is forcefully ENABLED via the 'ru.vidtu.hcscr.mixinextras' property.");
            return true;
        }

        // Check for any other value.
        if (!"auto".equalsIgnoreCase(property)) {
            // Log, throw.
            throw new IllegalStateException("HCsCR: System property 'ru.vidtu.hcscr.mixinextras' set to an invalid value '" + property + "'. Allowed values are: 'true', 'false', and 'auto'.");
        }

        // Try to find MixinExtras.
        try {
            // Find MixinExtras version.
            MixinExtrasVersion version = MixinExtrasVersion.LATEST;

            // Log.
            LOGGER.info(HCSCR_MARKER, "HCsCR: MixinExtras HAS been found, and it will be used. (version: {})", version);

            // Enabled.
            return true;
        } catch (Throwable t) {
            // Log.
            LOGGER.info(HCSCR_MARKER, "HCsCR: MixinExtras has NOT been found, and it won't be used.");
            LOGGER.debug(HCSCR_MARKER, "HCsCR: Unable to provide compat for MixinExtras, it's probably not installed. (plugin: {})", this, t);

            // Disable.
            return false;
        }
    }
}
